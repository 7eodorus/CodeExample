<?php
/**
 * –î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤.
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å X –∑–∞–¥–∞—á –Ω–∞ —Ä–µ–≤—å—é.
 *
 * @since #VDS-1210
 *
 * @author Dmitry Voronin <dmv@VDS.org>
 */
namespace app\modules\VDS\services\detectors;

use Yii;
use app\modules\VDS\models\TelegramChat;

class TargetNoticeDetector extends DetectorAbstract
{
    /** {@inheritdoc} */
    public function detect()
    {
        if (!empty($this->_config['offset'])) {
            $this->filterPullRequests($this->_config['offset']);
        }

        $this->_openPullRequests = (array) $this->_openPullRequests;
        shuffle($this->_openPullRequests);

        $logInfo = [];
        foreach ($this->_openPullRequests as $pullRequest) {
            foreach ($this->_config['developers'] as $developer) {
                if (count($logInfo[$developer]) == $this->_config['countPullRequests']) {
                    break;
                }

                $jiraTicket = $pullRequest->getJiraTicket();

                if ($jiraTicket->getOwnerKey() != $developer
                    && !in_array($developer, $pullRequest->getApprovedUserLogin())
                    && $pullRequest->isOwnerApprove()
                ) {
                    $logInfo[$developer][] = $pullRequest;
                }
            }
        }

        if ($logInfo) {
            $this->setLog($logInfo);

            return true;
        }

        return false;
    }

    /** {@inheritdoc} */
    public function notify()
    {
        $response = [];

        foreach ($this->_log as $userId => $pullRequests) {
            $chatId = '';
            $name = '';
            $index = 1;
            $notify = [];

            $telegramUserInfo = TelegramChat::getTcInfoByJiraLogin($userId);
            if ($telegramUserInfo) {
                $name = $telegramUserInfo['name'];
                $chatId = $telegramUserInfo['id'];
            }

            foreach ($pullRequests as $pullRequestItem) {
                $jiraTicket = $pullRequestItem->getJiraTicket();

                if (empty($name)) {
                    $name = $jiraTicket->getOwnerDisplayName();
                }

                // dz: —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                $text = sprintf(
                    "\n\n" . '%d. %s %s %s[%s](%s)%s –∂–¥–µ—Ç *%s*',
                    $index++,
                    $pullRequestItem->isOwnerApprove() ? '‚úÖ ' : '',
                    ($pullRequestItem->getDiffsCount() > $this->_config['complexityLimit'] ? '' : self::SMALL_SIZE_ICON),
                    $pullRequestItem->isNeedWork() ? '‚õîÔ∏è ' : '',
                    $pullRequestItem->getTaskKey() . ':' . $pullRequestItem->getJiraTicket()->getSummaryFiltred(),
                    $pullRequestItem->getLink(),
                    $pullRequestItem->getJiraTicket()->isExpedite() ? 'üöÄ' : '',
                    $this->prepareTime($pullRequestItem->timeWaitFromLastUpdated())
                );
                // dz: –Ω–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                if ($pullRequestItem->getCreateTime() <> $pullRequestItem->getUpdateTime()) {
                    $text .= sprintf(' –∏–∑ %s', $this->prepareTime($pullRequestItem->timeWaitFromCreated()));
                }
                // dz: —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –∞–ø–ø—Ä—É–≤
                if ($pullRequestItem->getApprovedUser()) {
                    $text .= sprintf(' (—É–∂–µ –µ—Å—Ç—å –∞–ø–ø—Ä—É–≤ –æ—Ç %s)', implode(', ', $pullRequestItem->getApprovedUserName()));
                }
                // dz: —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
                $textDeadline = $this->getDeadlineNotify($pullRequestItem);
                if ($textDeadline) {
                    $text .= sprintf(' üìÜ –¥–µ–¥–ª–∞–π–Ω %s', $textDeadline);
                }

                $notify[] = $text;
            }

            $notify = implode('', $notify);
            $notify .= "\n\n" . Yii::t(
                'app',
                '–í—Å–µ–≥–æ {n,plural,=0{–Ω–µ—Ç –∑–∞–¥–∞—á} =1{# –∑–∞–¥–∞—á–∞} =2{# –∑–∞–¥–∞—á–∏} =3{# –∑–∞–¥–∞—á–∏} =4{# –∑–∞–¥–∞—á–∏} other{# –∑–∞–¥–∞—á}} –≤–∏—Å–∏—Ç –Ω–∞ —Ä–µ–≤—å—é',
                ['n' => count($this->_openPullRequests)]
            );

            $response[] = [
                'chatId' => $chatId,
                'message' => $name . ', –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–∞—Ä—É –∑–∞–¥–∞—á–µ–∫ –Ω–∞ —Ä–µ–≤—å—é: ' . $notify,
            ];
        }

        return $response;
    }
}